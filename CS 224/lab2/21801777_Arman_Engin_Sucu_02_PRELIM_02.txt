# CS224
# Lab No: 02
# Section No: 02
# Name: Arman Engin Sucu
# ID: 21801777
# part1: a program to find qualities of the array such as elements of the array, amx and min values as well as symetricy

.data
array: .word 73, 34, 130, 34, 73
arraySize: .word 5
textForArray: .asciiz "The array is: "
textForEmptyArray: .asciiz "Array is empty."
spaceForArray: .asciiz " "
textForSymmetric: .asciiz "\nArray is symmetric."
textForNotSymmetric: .asciiz "\nArray is not symmetric."
textForEmptyFindMinMax: .asciiz "\nArray does not have min and max since it is empty."
textForMin: .asciiz "\nMin value is: "
textForMax: .asciiz "\nMax value : "
.text
la $a0, array
lw $a1, arraySize
jal PrintArray
jal CheckSymmetric
beq $v0, 1, printTextForSymmetric
beq $v0, 0, printTextForNotSymmetric
backFromSymmetric:
jal FindMinMax
move $s0, $v0 # puting min value to $s0
move $s1, $v1 # putting max value to $s1
#print text for min
li $v0, 4
la $a0, textForMin
syscall
# print min
li $v0, 1
add $a0 $zero, $s0
syscall
#print text for max
li $v0, 4
la $a0, textForMax
syscall
# print max
li $v0, 1
add $a0 $zero, $s1
syscall
li $v0, 10
syscall

PrintArray: 
	addi $sp, $sp, -16 
	sw $a0, 0($sp)	
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	sw $s2, 12($sp)
	sw $s3, 16($sp)
	# checking if array is empty
	beq $a1, 0, arrayIsEmpty
	move $s0, $a0 # address of the array
	addi $s1, $zero, 0 # index
	mul $s2, $a1, 4 #last byte of the array 
	# print the textForArray
	li $v0, 4
	la $a0, textForArray
	syscall
	print:
		add $s3, $s0, $s1
		#print the index of the array
		li $v0, 1
		lw $a0, ($s3)
		syscall
		# print the space to make array readeable
		li $v0, 4
		la $a0, spaceForArray
		syscall
		addi $s1, $s1, 4
		bne $s1, $s2, print
	goBack:
	lw $a0, 0($sp)
	lw $s0, 4($sp)
	lw $s1, 8($sp)
	lw $s2, 12($sp)
	lw $s3, 16($sp)
	addi $sp, $sp, 16
	jr $ra
	arrayIsEmpty:
		li $v0, 4
		la $a0, textForEmptyArray
		syscall
		j goBack
		
#Checks if an array is symmetric (returns 1 in $v0 if symmetric, returns 0 otherwise).
CheckSymmetric: 
	addi $sp, $sp, -16
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	beq $a1, 0, symmetric
	addi $s0, $a0, 0 # adress of the array
	addi $s1, $zero, 0 # index from start
	# index from end
	mul $s2, $a1, 4 
	addi $s2, $s2, -4
	while:	
	add $s3, $s0, $s1 # adress for the start index
	add $s4, $s0, $s2 # adress for the end index
	lw $s3, ($s3)
	lw $s4, ($s4)
	bne $s3, $s4, notSymmetric 
	bgeu $s0, $s1, symmetric
	addi $s1, $s1, 4
	addi $s2, $s2, -4
	j while
	notSymmetric:
		li $v0, 0	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		addi $sp, $sp, 16
		jr $ra
	symmetric:
		li $v0, 1  	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		addi $sp, $sp, 16
		jr $ra
	
printTextForSymmetric:
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	li $v0, 4
	la $a0, textForSymmetric
	syscall
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	j backFromSymmetric
	
printTextForNotSymmetric:
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	li $v0, 4
	la $a0, textForNotSymmetric
	syscall
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	j backFromSymmetric
	
# FindMinMax: Finds minimum and maximum elements of an array and returns them, respectively, in $v0 and $v1.
FindMinMax:
	addi $sp, $sp, -16
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	beq $a1, 0, emptyFindMinMax
	addi $s0, $zero, 10000000 # initializing $s0 to calculate min number
	addi $s1, $zero, -10000000 # initializng $s1 to calcualte max number
	addi $s2, $zero, 0 # index
	mul $s3, $a1, 4 # last byte
	while2:
		add $s4, $a0, $s2 # $s4 holds the adress of the element
		lw $s4, ($s4) # load the element from the adress
		blt $s4, $s0, setMin
		continueFindMinMax1:
		bgt $s4, $s1, setMax
		continueFindMinMax2:
		addi $s2, $s2, 4
		beq $s2, $s3, exitWhile
		j while2
setMin:
	move $s0, $s4
	j continueFindMinMax1
setMax:
	move $s1, $s4
	j continueFindMinMax2

	exitWhile:
		move $v0, $s0
		move $v1, $s1
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		addi $sp, $sp 16
		jr $ra

emptyFindMinMax:
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	li $v0, 4
	la $a0, textForEmptyFindMinMax
	syscall
	li $v0, 10
	syscall
	


# CS224
# Lab No: 02
# Section No: 02
# Name: Arman Engin Sucu
# ID: 21801777
# part2: a program that reverse the bits of the given number

.data
text: .asciiz "the reversed number is: "

.text
li $a0, 3
jal reverseBits
move $s0, $v0
# print the text
li $v0, 4
la $a0, text
syscall
# print the reverse bit
li $v0, 34
move $a0, $s0
syscall
li $v0, 10
syscall 

reverseBits:
	addi $sp, $sp, -16
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	
	addi $s0, $zero, 0 # $s0 holds shift amount
	addi $s1, $zero, 1 # $s1 holds the and value
	addi $s2, $zero, 0 # $s2 holds the result
	addi $s3, $zero, 31 # while loops 31 times
	while:
		and $s4, $a0, $s1 # $s4 holds the current least significant bit of $a0
		srl $a0, $a0, 1 # shifting right once $a0
	 	add $s2, $s2, $s4
	 	blt $s3, 1, exit
	 	sll $s2, $s2, 1
	 	sub $s3, $s3, 1
	 	j while
	 exit:
	 	move $v0, $s2
	 	lw $s0, 0($sp)
	 	lw $s1, 4($sp)
	 	lw $s2, 8($sp)
	 	lw $s3, 12($sp)
	 	lw $s4, 16($sp)
	 	jr $ra
	 	