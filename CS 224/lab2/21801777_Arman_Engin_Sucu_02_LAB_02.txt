# CS224
# Lab No: 02
# Section No: 02
# Name: Arman Engin Sucu
# ID: 21801777
# part3: a program that gets the array from the user and gives special information about it

.data
textForArraySize: .asciiz "Enter the array size please: "
textForArrayElement: .asciiz "Enter the array element please: "
textForArray: .asciiz "The array is: "
textForEmptyArray: .asciiz "Array is empty."
spaceForArray: .asciiz " "
textForSymmetric: .asciiz "\nArray is symmetric."
textForNotSymmetric: .asciiz "\nArray is not symmetric."
textForEmptyFindMinMax: .asciiz "\nArray does not have min and max since it is empty."
textForMin: .asciiz "\nMin value is: "
textForMax: .asciiz "\nMax value : "

.text
jal getArray
jal CheckSymmetric
beq $v0, 1, printTextForSymmetric
beq $v0, 0, printTextForNotSymmetric
backFromSymmetric:
jal FindMinMax
move $s0, $v0 # puting min value to $s0
move $s1, $v1 # putting max value to $s1
#print text for min
li $v0, 4
la $a0, textForMin
syscall
# print min
li $v0, 1
add $a0 $zero, $s0
syscall
#print text for max
li $v0, 4
la $a0, textForMax
syscall
# print max
li $v0, 1
add $a0 $zero, $s1
syscall
li $v0, 10
syscall

getArray:
	addi $sp, $sp, -20
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	sw $ra, 20($sp) # storing $ra since getArray calls printArray function
	# prints the text for array size
	li $v0, 4
	la $a0, textForArraySize
	syscall
	# prompt user to enter the array size
	li $v0, 5
	syscall
	beq $v0, $zero, arrayIsEmptyGetArray
	move $s0, $v0 # get size to the $s0
	mul $s1, $s0, 4 # get bytes to be allocated in the $s1
	move $a0, $s1 # The bytes size of the memory location to be allocated
	li $v0, 9 # Used for dynamic storage allocation
	syscall # Perform storage allocation by using values stored in $a0 (memory size) and $v0 (action to be performed by syscall).
	add $s2, $zero, $v0 # $s2 points to the beginning of the array
	move $s3, $s2 # $s3 holds the copy of the beginning of the array
	addi $s4, $zero, 0 # $s4 is the max value for i: i < $s4 
	whileForGetArray:
		li $v0, 4
		la $a0, textForArrayElement
		syscall
		li $v0, 5 # get array element from the user
		syscall
		sw $v0, 0($s2)
		addi $s2, $s2, 4
		addi $s4, $s4, 4
		bne $s4, $s1, whileForGetArray
		move $a0, $s3
		move $a1, $s0
		goBack2:
		jal PrintArray
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	lw $ra, 20($sp)
	addi $sp, $sp, 20
	jr $ra
arrayIsEmptyGetArray:
	addi $a1, $zero, 0
	j goBack2
	
	
PrintArray: 
	addi $sp, $sp, -16 
	sw $a0, 0($sp)	
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	sw $s2, 12($sp)
	sw $s3, 16($sp)
	# checking if array is empty
	beq $a1, 0, arrayIsEmpty
	move $s0, $a0 # address of the array
	addi $s1, $zero, 0 # index
	mul $s2, $a1, 4 #last byte of the array 
	# print the textForArray
	li $v0, 4
	la $a0, textForArray
	syscall
	print:
		add $s3, $s0, $s1
		#print the index of the array
		li $v0, 1
		lw $a0, ($s3)
		syscall
		# print the space to make array readeable
		li $v0, 4
		la $a0, spaceForArray
		syscall
		addi $s1, $s1, 4
		bne $s1, $s2, print
	goBack:
	lw $a0, 0($sp)
	lw $s0, 4($sp)
	lw $s1, 8($sp)
	lw $s2, 12($sp)
	lw $s3, 16($sp)
	addi $sp, $sp, 16
	jr $ra
	arrayIsEmpty:
		li $v0, 4
		la $a0, textForEmptyArray
		syscall
		j goBack
		
#Checks if an array is symmetric (returns 1 in $v0 if symmetric, returns 0 otherwise).
CheckSymmetric: 
	addi $sp, $sp, -16
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	beq $a1, 0, symmetric
	addi $s0, $a0, 0 # adress of the array
	addi $s1, $zero, 0 # index from start
	# index from end
	mul $s2, $a1, 4 
	addi $s2, $s2, -4
	while:	
	add $s3, $s0, $s1 # adress for the start index
	add $s4, $s0, $s2 # adress for the end index
	lw $s3, ($s3)
	lw $s4, ($s4)
	bne $s3, $s4, notSymmetric 
	bgeu $s0, $s1, symmetric
	addi $s1, $s1, 4
	addi $s2, $s2, -4
	j while
	notSymmetric:
		li $v0, 0	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		addi $sp, $sp, 16
		jr $ra
	symmetric:
		li $v0, 1  	
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		addi $sp, $sp, 16
		jr $ra
	
printTextForSymmetric:
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	li $v0, 4
	la $a0, textForSymmetric
	syscall
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	j backFromSymmetric
	
printTextForNotSymmetric:
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	li $v0, 4
	la $a0, textForNotSymmetric
	syscall
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	j backFromSymmetric
	
# FindMinMax: Finds minimum and maximum elements of an array and returns them, respectively, in $v0 and $v1.
FindMinMax:
	addi $sp, $sp, -16
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	sw $s2, 8($sp)
	sw $s3, 12($sp)
	sw $s4, 16($sp)
	beq $a1, 0, emptyFindMinMax
	addi $s0, $zero, 10000000 # initializing $s0 to calculate min number
	addi $s1, $zero, -10000000 # initializng $s1 to calcualte max number
	addi $s2, $zero, 0 # index
	mul $s3, $a1, 4 # last byte
	while2:
		add $s4, $a0, $s2 # $s4 holds the adress of the element
		lw $s4, ($s4) # load the element from the adress
		blt $s4, $s0, setMin
		continueFindMinMax1:
		bgt $s4, $s1, setMax
		continueFindMinMax2:
		addi $s2, $s2, 4
		beq $s2, $s3, exitWhile
		j while2
setMin:
	move $s0, $s4
	j continueFindMinMax1
setMax:
	move $s1, $s4
	j continueFindMinMax2

	exitWhile:
		move $v0, $s0
		move $v1, $s1
		lw $s0, 0($sp)
		lw $s1, 4($sp)
		lw $s2, 8($sp)
		lw $s3, 12($sp)
		lw $s4, 16($sp)
		addi $sp, $sp 16
		jr $ra

emptyFindMinMax:
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	li $v0, 4
	la $a0, textForEmptyFindMinMax
	syscall
	li $v0, 10
	syscall
	


# CS224
# Lab No: 02
# Section No: 02
# Name: Arman Engin Sucu
# ID: 21801777
# part4: a program to find the pattern inside the value which are given by user

.data
bitPattern: .word 0
intValue: .word 0
length: .word 1
textForExcessedLength: .asciiz "The length is not a reasonable number so the pattern can not be found."
text1: .asciiz "The count for the number " 
text2: .asciiz " for length "
text3: .asciiz " in "
text4: .asciiz " pattern is: "
.text
main:
lw $a0, bitPattern
lw $a1, intValue
lw $a2, length
jal determineBitPattern
move $s0, $v0 # put result into $s0
move $s1, $a0 # put bitPattern to $s1 to empty $a0
# print text1
li $v0, 4
la $a0, text1
syscall
# print int value as hexadceimal value
li $v0, 34
move $a0, $a1
syscall 
# print text2
li $v0, 4
la $a0, text2
syscall
# print length
li $v0, 1
move $a0, $a2
syscall 
# print text3
li $v0, 4
la $a0, text3
syscall
# print bitPattern as hexadceimal value
li $v0, 34
move $a0, $s1
syscall 
# print text4
li $v0, 4
la $a0, text4
syscall
# print result 
li $v0, 1
move $a0, $s0
syscall 
# exit the program
li $v0, 10
syscall
determineBitPattern:	
	blt $a2, 1, exceed
	bgt $a2, 32, exceed
	
	addi $sp, $sp, -16
	sw $s0, 0($sp) 
	sw $s1, 4($sp) 
	sw $s2, 8($sp) 
	sw $s3, 12($sp) 
	sw $s4, 16($sp) 
	
	addi $s0, $zero, 1 #intiliaze $s0 with 1
	sllv $s0, $s0, $a2 # shift left $s0 length($a2) times
	sub $s0, $s0, 1 # subtract 1 from $s0 to enable 1s in the least significant length bits
	move $s1, $a1 # s1 has the value
	addi $s2, $zero, 0
	addi $s3, $zero, 0 # $s3 holds the result
	addi $s4, $a2, 0 # $s4 holds how many bits have been checked( initial value is the length )
	 while:
	 	and $s2, $s1, $s0 # checking if least significant length bits of $s1 have the pattern
	 	beq $s2, $a0, incrementOne
	 	continue:
	 		add $s4, $s4, $a2
	 		bgt $s4, 32, finish
	 		srlv $s1, $s1, $a2
	 		j while 	
exceed:
	li $v0, 4
	la $a0, textForExcessedLength
	syscall 
	li $v0 10
	syscall
	
incrementOne:
	addi $s3, $s3, 1
	j continue

finish:
	move $v0, $s3 # return result
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $s3, 12($sp)
	lw $s4, 16($sp)
	addi $sp, $sp, 16
	jr $ra

