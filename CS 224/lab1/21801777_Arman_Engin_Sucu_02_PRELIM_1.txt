# CS224
# Lab No:1
# Section No: 2
# Name: Arman Engin Sucu
# ID: 21801777
# part1: The program returns an output for the user that says whether the array is symmetric or not.
.data
	array: .word 1, 4, 4, 5, 2, 2, 1
	arrsize: .word 7
	text1: .asciiz "The above array is symmetric"	
	text2: .asciiz "The above array is not symmetric"	
	newLine: .asciiz "\n"
	space: .asciiz " "

.text
addi $t0, $zero, 0 # index from bottom
lw $t1, arrsize
addi $t1, $t1, -1 # index from top
# la $s0, array # load the base adress into the $s0
j done
loop:
	sll $t2, $t0, 2 # bottom index x 4(4 bytes jump)
	# addi $s0, $t2, 0
	lw $t2, array($s2)
	sll $t3, $t1, 2 # top index x 4(4bytes jump)
	# addi $s0, $t3, 0
	lw $t3, array($t3)
	bne $t2, $t3, notSymmetric
	addi $t0, $t0, 1
	addi $t1, $t1, -1
	done: bne $t0, $t1, loop

#Displays a message to announce array is symmetric	
# Display as a string
jal printArray	
li $v0, 4 
la $a0, text1
syscall
# stop execution
li $v0, 10
syscall

# Displays a message to announce array is not symmetric
notSymmetric:
	jal printArray
	# Display as a string
	li $v0, 4
	la $a0, text2
	syscall
	# stop execution
	li $v0, 10
	syscall
	
# function to print array 
printArray:
addi $t0, $zero, 0
lw $s1, arrsize
mul $t2, $s1, 4
j while
do:
	lw $t1, array($t0)
	li $v0, 1
	move $a0, $t1
	syscall
	li $v0, 4
	la $a0, space
	syscall
	addi $t0, $t0, 4
	while: bne $t0, $t2, do
	li $v0, 4
	la $a0, newLine
	syscall
	jr $ra

# CS224
# Lab No:1
# Section No: 2
# Name: Arman Engin Sucu
# ID: 21801777
# part2: the program takes 4 inputs from the user and according to the entries it calculates the resuslt for the specific mathematical expression
.data
	numberA: .asciiz "Please enter the a: "
	numberB: .asciiz "Please enter the b: "
	numberC: .asciiz "Please enter the c: "
	numberD: .asciiz "Please enter the d: "
	result: .asciiz "The result for a*(b-c)%d is: "

.text
	# Prompt the user to enter tha numberA
	li $v0, 4
	la $a0, numberA
	syscall
	# Get the numberA
	li $v0, 5
	syscall
	# Store the numberA in $t0
	move $s0, $v0
	
	# Prompt the user to enter tha numberB
	li $v0, 4
	la $a0, numberB
	syscall
	# Get the numberB
	li $v0, 5
	syscall
	# Store the numberB in $t0
	move $s1, $v0
	
	# Prompt the user to enter tha numberC
	li $v0, 4
	la $a0, numberC
	syscall
	# Get the numberC
	li $v0, 5
	syscall
	# Store the numberC in $t0
	move $s2, $v0
	
	# Prompt the user to enter tha numberD
	li $v0, 4
	la $a0, numberD
	syscall
	# Get the numberD
	li $v0, 5
	syscall
	# Store the numberD in $t0
	move $s3, $v0
	
	sub $t0, $s1, $s2 # store b-c at $t0
	mult $s0, $t0 # a x $t0
	mflo $t0 # get the multiplication
	div $t0, $s3 # $t0/$s0
	mfhi $t0 # get the remainder
	
	# print the result interface
	li $v0, 4
	la $a0, result
	syscall
	# print the result
	li $v0, 1
	move $a0, $t0
	syscall